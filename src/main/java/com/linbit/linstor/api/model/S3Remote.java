/*
 * Linstor REST API
 *
 *
 * OpenAPI spec version: 1.10.0
 * Contact: rene.peinthor@linbit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.linbit.linstor.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * S3Remote
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-31T11:02:45.596Z[GMT]")
public class S3Remote {
  @JsonProperty("remote_name")
  private String remoteName = null;

  @JsonProperty("endpoint")
  private String endpoint = null;

  @JsonProperty("bucket")
  private String bucket = null;

  @JsonProperty("region")
  private String region = null;

  @JsonProperty("access_key")
  private String accessKey = null;

  @JsonProperty("secret_key")
  private String secretKey = null;

  @JsonProperty("use_path_style")
  private Boolean usePathStyle = false;

  public S3Remote remoteName(String remoteName) {
    this.remoteName = remoteName;
    return this;
  }

   /**
   * Get remoteName
   * @return remoteName
  **/
  @Schema(description = "")
  public String getRemoteName() {
    return remoteName;
  }

  public void setRemoteName(String remoteName) {
    this.remoteName = remoteName;
  }

  public S3Remote endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @Schema(description = "")
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }

  public S3Remote bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

   /**
   * Get bucket
   * @return bucket
  **/
  @Schema(description = "")
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }

  public S3Remote region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public S3Remote accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

   /**
   * Get accessKey
   * @return accessKey
  **/
  @Schema(description = "")
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }

  public S3Remote secretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

   /**
   * Get secretKey
   * @return secretKey
  **/
  @Schema(description = "")
  public String getSecretKey() {
    return secretKey;
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }

  public S3Remote usePathStyle(Boolean usePathStyle) {
    this.usePathStyle = usePathStyle;
    return this;
  }

   /**
   * Get usePathStyle
   * @return usePathStyle
  **/
  @Schema(description = "")
  public Boolean isUsePathStyle() {
    return usePathStyle;
  }

  public void setUsePathStyle(Boolean usePathStyle) {
    this.usePathStyle = usePathStyle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3Remote s3Remote = (S3Remote) o;
    return Objects.equals(this.remoteName, s3Remote.remoteName) &&
        Objects.equals(this.endpoint, s3Remote.endpoint) &&
        Objects.equals(this.bucket, s3Remote.bucket) &&
        Objects.equals(this.region, s3Remote.region) &&
        Objects.equals(this.accessKey, s3Remote.accessKey) &&
        Objects.equals(this.secretKey, s3Remote.secretKey) &&
        Objects.equals(this.usePathStyle, s3Remote.usePathStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteName, endpoint, bucket, region, accessKey, secretKey, usePathStyle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3Remote {\n");
    
    sb.append("    remoteName: ").append(toIndentedString(remoteName)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    usePathStyle: ").append(toIndentedString(usePathStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
