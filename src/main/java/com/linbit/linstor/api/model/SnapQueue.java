/*
 * Linstor REST API
 *
 *
 * OpenAPI spec version: 1.22.0
 * Contact: rene.peinthor@linbit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.linbit.linstor.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.linbit.linstor.api.model.NodeQueue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * SnapQueue
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-02T13:40:09.628252133Z[Etc/UTC]")

public class SnapQueue {
  @JsonProperty("resource_name")
  private String resourceName = null;

  @JsonProperty("snapshot_name")
  private String snapshotName = null;

  @JsonProperty("remote_name")
  private String remoteName = null;

  @JsonProperty("incremental")
  private Boolean incremental = null;

  @JsonProperty("based_on")
  private String basedOn = null;

  @JsonProperty("start_timestamp")
  private Long startTimestamp = null;

  @JsonProperty("pref_node")
  private String prefNode = null;

  @JsonProperty("queue")
  private List<NodeQueue> queue = null;

  public SnapQueue resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

   /**
   * Get resourceName
   * @return resourceName
  **/
  @Schema(required = true, description = "")
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }

  public SnapQueue snapshotName(String snapshotName) {
    this.snapshotName = snapshotName;
    return this;
  }

   /**
   * Get snapshotName
   * @return snapshotName
  **/
  @Schema(required = true, description = "")
  public String getSnapshotName() {
    return snapshotName;
  }

  public void setSnapshotName(String snapshotName) {
    this.snapshotName = snapshotName;
  }

  public SnapQueue remoteName(String remoteName) {
    this.remoteName = remoteName;
    return this;
  }

   /**
   * Get remoteName
   * @return remoteName
  **/
  @Schema(required = true, description = "")
  public String getRemoteName() {
    return remoteName;
  }

  public void setRemoteName(String remoteName) {
    this.remoteName = remoteName;
  }

  public SnapQueue incremental(Boolean incremental) {
    this.incremental = incremental;
    return this;
  }

   /**
   * Get incremental
   * @return incremental
  **/
  @Schema(required = true, description = "")
  public Boolean isIncremental() {
    return incremental;
  }

  public void setIncremental(Boolean incremental) {
    this.incremental = incremental;
  }

  public SnapQueue basedOn(String basedOn) {
    this.basedOn = basedOn;
    return this;
  }

   /**
   * Get basedOn
   * @return basedOn
  **/
  @Schema(description = "")
  public String getBasedOn() {
    return basedOn;
  }

  public void setBasedOn(String basedOn) {
    this.basedOn = basedOn;
  }

  public SnapQueue startTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Get startTimestamp
   * @return startTimestamp
  **/
  @Schema(required = true, description = "")
  public Long getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
  }

  public SnapQueue prefNode(String prefNode) {
    this.prefNode = prefNode;
    return this;
  }

   /**
   * Get prefNode
   * @return prefNode
  **/
  @Schema(required = true, description = "")
  public String getPrefNode() {
    return prefNode;
  }

  public void setPrefNode(String prefNode) {
    this.prefNode = prefNode;
  }

  public SnapQueue queue(List<NodeQueue> queue) {
    this.queue = queue;
    return this;
  }

  public SnapQueue addQueueItem(NodeQueue queueItem) {
    if (this.queue == null) {
      this.queue = new ArrayList<>();
    }
    this.queue.add(queueItem);
    return this;
  }

   /**
   * The list of nodes this snapshot is queued on. Will be empty if this  is an item of NodeQueue.queue 
   * @return queue
  **/
  @Schema(description = "The list of nodes this snapshot is queued on. Will be empty if this  is an item of NodeQueue.queue ")
  public List<NodeQueue> getQueue() {
    return queue;
  }

  public void setQueue(List<NodeQueue> queue) {
    this.queue = queue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapQueue snapQueue = (SnapQueue) o;
    return Objects.equals(this.resourceName, snapQueue.resourceName) &&
        Objects.equals(this.snapshotName, snapQueue.snapshotName) &&
        Objects.equals(this.remoteName, snapQueue.remoteName) &&
        Objects.equals(this.incremental, snapQueue.incremental) &&
        Objects.equals(this.basedOn, snapQueue.basedOn) &&
        Objects.equals(this.startTimestamp, snapQueue.startTimestamp) &&
        Objects.equals(this.prefNode, snapQueue.prefNode) &&
        Objects.equals(this.queue, snapQueue.queue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceName, snapshotName, remoteName, incremental, basedOn, startTimestamp, prefNode, queue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapQueue {\n");
    
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    snapshotName: ").append(toIndentedString(snapshotName)).append("\n");
    sb.append("    remoteName: ").append(toIndentedString(remoteName)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("    basedOn: ").append(toIndentedString(basedOn)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    prefNode: ").append(toIndentedString(prefNode)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
