/*
 * Linstor REST API
 *
 *
 * OpenAPI spec version: 1.25.1
 * Contact: rene.peinthor@linbit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.linbit.linstor.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Candidate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-05-08T11:58:50.875992750Z[Etc/UTC]")

public class Candidate {
  @JsonProperty("storage_pool")
  private String storagePool = null;

  @JsonProperty("max_volume_size_kib")
  private Long maxVolumeSizeKib = null;

  @JsonProperty("node_names")
  private List<String> nodeNames = null;

  @JsonProperty("all_thin")
  private Boolean allThin = null;

  public Candidate storagePool(String storagePool) {
    this.storagePool = storagePool;
    return this;
  }

   /**
   * Get storagePool
   * @return storagePool
  **/
  @Schema(example = "DfltStorPool", description = "")
  public String getStoragePool() {
    return storagePool;
  }

  public void setStoragePool(String storagePool) {
    this.storagePool = storagePool;
  }

  public Candidate maxVolumeSizeKib(Long maxVolumeSizeKib) {
    this.maxVolumeSizeKib = maxVolumeSizeKib;
    return this;
  }

   /**
   * maximum size in KiB
   * @return maxVolumeSizeKib
  **/
  @Schema(example = "3194880", description = "maximum size in KiB")
  public Long getMaxVolumeSizeKib() {
    return maxVolumeSizeKib;
  }

  public void setMaxVolumeSizeKib(Long maxVolumeSizeKib) {
    this.maxVolumeSizeKib = maxVolumeSizeKib;
  }

  public Candidate nodeNames(List<String> nodeNames) {
    this.nodeNames = nodeNames;
    return this;
  }

  public Candidate addNodeNamesItem(String nodeNamesItem) {
    if (this.nodeNames == null) {
      this.nodeNames = new ArrayList<>();
    }
    this.nodeNames.add(nodeNamesItem);
    return this;
  }

   /**
   * Get nodeNames
   * @return nodeNames
  **/
  @Schema(description = "")
  public List<String> getNodeNames() {
    return nodeNames;
  }

  public void setNodeNames(List<String> nodeNames) {
    this.nodeNames = nodeNames;
  }

  public Candidate allThin(Boolean allThin) {
    this.allThin = allThin;
    return this;
  }

   /**
   * Get allThin
   * @return allThin
  **/
  @Schema(description = "")
  public Boolean isAllThin() {
    return allThin;
  }

  public void setAllThin(Boolean allThin) {
    this.allThin = allThin;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Candidate candidate = (Candidate) o;
    return Objects.equals(this.storagePool, candidate.storagePool) &&
        Objects.equals(this.maxVolumeSizeKib, candidate.maxVolumeSizeKib) &&
        Objects.equals(this.nodeNames, candidate.nodeNames) &&
        Objects.equals(this.allThin, candidate.allThin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storagePool, maxVolumeSizeKib, nodeNames, allThin);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Candidate {\n");
    
    sb.append("    storagePool: ").append(toIndentedString(storagePool)).append("\n");
    sb.append("    maxVolumeSizeKib: ").append(toIndentedString(maxVolumeSizeKib)).append("\n");
    sb.append("    nodeNames: ").append(toIndentedString(nodeNames)).append("\n");
    sb.append("    allThin: ").append(toIndentedString(allThin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
