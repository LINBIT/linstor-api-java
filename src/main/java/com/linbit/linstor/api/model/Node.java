/*
 * Linstor REST API
 *
 *
 * OpenAPI spec version: 1.8.0
 * Contact: rene.peinthor@linbit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.linbit.linstor.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.linbit.linstor.api.model.LayerType;
import com.linbit.linstor.api.model.NetInterface;
import com.linbit.linstor.api.model.Properties;
import com.linbit.linstor.api.model.ProviderKind;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Node
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-18T05:15:14.614Z[GMT]")
public class Node {
  @JsonProperty("name")
  private String name = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    CONTROLLER("Controller"),
    SATELLITE("Satellite"),
    COMBINED("Combined"),
    AUXILIARY("Auxiliary"),
    OPENFLEX_TARGET("Openflex_Target");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("flags")
  private List<String> flags = null;

  @JsonProperty("props")
  private Properties props = null;

  @JsonProperty("net_interfaces")
  private List<NetInterface> netInterfaces = null;

  /**
   * Enum describing the current connection status. 
   */
  public enum ConnectionStatusEnum {
    OFFLINE("OFFLINE"),
    CONNECTED("CONNECTED"),
    ONLINE("ONLINE"),
    VERSION_MISMATCH("VERSION_MISMATCH"),
    HOSTNAME_MISMATCH("HOSTNAME_MISMATCH"),
    FULL_SYNC_FAILED("FULL_SYNC_FAILED"),
    AUTHENTICATION_ERROR("AUTHENTICATION_ERROR"),
    UNKNOWN("UNKNOWN");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ConnectionStatusEnum fromValue(String text) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("connection_status")
  private ConnectionStatusEnum connectionStatus = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("storage_providers")
  private List<ProviderKind> storageProviders = null;

  @JsonProperty("resource_layers")
  private List<LayerType> resourceLayers = null;

  @JsonProperty("unsupported_providers")
  private Map<String, List<String>> unsupportedProviders = null;

  @JsonProperty("unsupported_layers")
  private Map<String, List<String>> unsupportedLayers = null;

  public Node name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(example = "nodeA", required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Node type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(example = "Satellite", required = true, description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Node flags(List<String> flags) {
    this.flags = flags;
    return this;
  }

  public Node addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @Schema(description = "")
  public List<String> getFlags() {
    return flags;
  }

  public void setFlags(List<String> flags) {
    this.flags = flags;
  }

  public Node props(Properties props) {
    this.props = props;
    return this;
  }

   /**
   * Get props
   * @return props
  **/
  @Schema(description = "")
  public Properties getProps() {
    return props;
  }

  public void setProps(Properties props) {
    this.props = props;
  }

  public Node netInterfaces(List<NetInterface> netInterfaces) {
    this.netInterfaces = netInterfaces;
    return this;
  }

  public Node addNetInterfacesItem(NetInterface netInterfacesItem) {
    if (this.netInterfaces == null) {
      this.netInterfaces = new ArrayList<>();
    }
    this.netInterfaces.add(netInterfacesItem);
    return this;
  }

   /**
   * Get netInterfaces
   * @return netInterfaces
  **/
  @Schema(description = "")
  public List<NetInterface> getNetInterfaces() {
    return netInterfaces;
  }

  public void setNetInterfaces(List<NetInterface> netInterfaces) {
    this.netInterfaces = netInterfaces;
  }

  public Node connectionStatus(ConnectionStatusEnum connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

   /**
   * Enum describing the current connection status. 
   * @return connectionStatus
  **/
  @Schema(example = "ONLINE", description = "Enum describing the current connection status. ")
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(ConnectionStatusEnum connectionStatus) {
    this.connectionStatus = connectionStatus;
  }

  public Node uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * unique object id
   * @return uuid
  **/
  @Schema(example = "e8ef8d6b-17bc-42f0-9367-4aae40c78ecb", description = "unique object id")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public Node storageProviders(List<ProviderKind> storageProviders) {
    this.storageProviders = storageProviders;
    return this;
  }

  public Node addStorageProvidersItem(ProviderKind storageProvidersItem) {
    if (this.storageProviders == null) {
      this.storageProviders = new ArrayList<>();
    }
    this.storageProviders.add(storageProvidersItem);
    return this;
  }

   /**
   * Get storageProviders
   * @return storageProviders
  **/
  @Schema(description = "")
  public List<ProviderKind> getStorageProviders() {
    return storageProviders;
  }

  public void setStorageProviders(List<ProviderKind> storageProviders) {
    this.storageProviders = storageProviders;
  }

  public Node resourceLayers(List<LayerType> resourceLayers) {
    this.resourceLayers = resourceLayers;
    return this;
  }

  public Node addResourceLayersItem(LayerType resourceLayersItem) {
    if (this.resourceLayers == null) {
      this.resourceLayers = new ArrayList<>();
    }
    this.resourceLayers.add(resourceLayersItem);
    return this;
  }

   /**
   * Get resourceLayers
   * @return resourceLayers
  **/
  @Schema(description = "")
  public List<LayerType> getResourceLayers() {
    return resourceLayers;
  }

  public void setResourceLayers(List<LayerType> resourceLayers) {
    this.resourceLayers = resourceLayers;
  }

  public Node unsupportedProviders(Map<String, List<String>> unsupportedProviders) {
    this.unsupportedProviders = unsupportedProviders;
    return this;
  }

  public Node putUnsupportedProvidersItem(String key, List<String> unsupportedProvidersItem) {
    if (this.unsupportedProviders == null) {
      this.unsupportedProviders = new HashMap<>();
    }
    this.unsupportedProviders.put(key, unsupportedProvidersItem);
    return this;
  }

   /**
   * Get unsupportedProviders
   * @return unsupportedProviders
  **/
  @Schema(description = "")
  public Map<String, List<String>> getUnsupportedProviders() {
    return unsupportedProviders;
  }

  public void setUnsupportedProviders(Map<String, List<String>> unsupportedProviders) {
    this.unsupportedProviders = unsupportedProviders;
  }

  public Node unsupportedLayers(Map<String, List<String>> unsupportedLayers) {
    this.unsupportedLayers = unsupportedLayers;
    return this;
  }

  public Node putUnsupportedLayersItem(String key, List<String> unsupportedLayersItem) {
    if (this.unsupportedLayers == null) {
      this.unsupportedLayers = new HashMap<>();
    }
    this.unsupportedLayers.put(key, unsupportedLayersItem);
    return this;
  }

   /**
   * Get unsupportedLayers
   * @return unsupportedLayers
  **/
  @Schema(description = "")
  public Map<String, List<String>> getUnsupportedLayers() {
    return unsupportedLayers;
  }

  public void setUnsupportedLayers(Map<String, List<String>> unsupportedLayers) {
    this.unsupportedLayers = unsupportedLayers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.name, node.name) &&
        Objects.equals(this.type, node.type) &&
        Objects.equals(this.flags, node.flags) &&
        Objects.equals(this.props, node.props) &&
        Objects.equals(this.netInterfaces, node.netInterfaces) &&
        Objects.equals(this.connectionStatus, node.connectionStatus) &&
        Objects.equals(this.uuid, node.uuid) &&
        Objects.equals(this.storageProviders, node.storageProviders) &&
        Objects.equals(this.resourceLayers, node.resourceLayers) &&
        Objects.equals(this.unsupportedProviders, node.unsupportedProviders) &&
        Objects.equals(this.unsupportedLayers, node.unsupportedLayers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, flags, props, netInterfaces, connectionStatus, uuid, storageProviders, resourceLayers, unsupportedProviders, unsupportedLayers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    props: ").append(toIndentedString(props)).append("\n");
    sb.append("    netInterfaces: ").append(toIndentedString(netInterfaces)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    storageProviders: ").append(toIndentedString(storageProviders)).append("\n");
    sb.append("    resourceLayers: ").append(toIndentedString(resourceLayers)).append("\n");
    sb.append("    unsupportedProviders: ").append(toIndentedString(unsupportedProviders)).append("\n");
    sb.append("    unsupportedLayers: ").append(toIndentedString(unsupportedLayers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
