/*
 * This file was autogenerated by genconsts.py
 *
 * LINSTOR - management of distributed storage/DRBD9 resources
 * Copyright (C) 2017 - 2020  LINBIT HA-Solutions GmbH
 * All Rights Reserved.
 * Author: Robert Altnoeder, Roland Kammerer, Gabor Hernadi, Rene Peinthor
 *
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may
 *   not use this file except in compliance with the License. You may obtain
 *   a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *   License for the specific language governing permissions and limitations
 *   under the License.
 */

package com.linbit.linstor.api;

@SuppressWarnings({"checkstyle:magicnumber", "checkstyle:constantname"})
public class ApiConsts
{
    /*
     * Bits 62 - 63 (most significant 2) are reserved for the message type masks (error, warning, info)
     * Bits 25 - 26 are reserved for the operation type masks (create, modify, delete)
     * Bits 18 - 22 are reserved for the object type masks (node, resource, resource definition, ...)
     * Bits 0  - 14 are reserved for codes
     */
    public static final long MASK_BITS_TYPE = 0xC000000000000000L;
    public static final long MASK_ERROR = 0xC000000000000000L;
    public static final long MASK_WARN = 0x8000000000000000L;
    public static final long MASK_INFO = 0x4000000000000000L;
    public static final long MASK_SUCCESS = 0x0000000000000000L;

    /*
     * Operation type masks
     */
    public static final long MASK_BITS_OP = 0x0000000003000000L;
    public static final long MASK_CRT = 0x0000000001000000L;
    public static final long MASK_MOD = 0x0000000002000000L;
    public static final long MASK_DEL = 0x0000000003000000L;

    /*
     * Type masks (Node, ResDfn, Res, VolDfn, Vol, NetInterface, ...)
     */
    public static final long MASK_BITS_OBJ = 0x00000000007C0000L;
    public static final long MASK_PHYSICAL_DEVICE = 0x00000000004C0000L;
    public static final long MASK_VLM_GRP = 0x0000000000480000L;
    public static final long MASK_RSC_GRP = 0x0000000000440000L;
    public static final long MASK_KVS = 0x0000000000400000L;
    public static final long MASK_NODE = 0x00000000003C0000L;
    public static final long MASK_RSC_DFN = 0x0000000000380000L;
    public static final long MASK_RSC = 0x0000000000340000L;
    public static final long MASK_VLM_DFN = 0x0000000000300000L;
    public static final long MASK_VLM = 0x00000000002C0000L;
    public static final long MASK_NODE_CONN = 0x0000000000280000L;
    public static final long MASK_RSC_CONN = 0x0000000000240000L;
    public static final long MASK_VLM_CONN = 0x0000000000200000L;
    public static final long MASK_NET_IF = 0x00000000001C0000L;
    public static final long MASK_STOR_POOL_DFN = 0x0000000000180000L;
    public static final long MASK_STOR_POOL = 0x0000000000140000L;
    public static final long MASK_CTRL_CONF = 0x0000000000100000L;
    public static final long MASK_SNAPSHOT = 0x00000000000C0000L;

    /*
     * Codes
     */
    public static final long MASK_BITS_CODE = 0x0000000000007FFFL;

    /*
     * Codes 1-9: success
     */
    public static final long CREATED = 1 | MASK_SUCCESS;
    public static final long DELETED = 2 | MASK_SUCCESS;
    public static final long MODIFIED = 3 | MASK_SUCCESS;
    public static final long PASSPHRASE_ACCEPTED = 4 | MASK_SUCCESS;

    /*
     * Codes 100 - 999: failures
     */

    /*
     * Codes 100 - 199: sql failures
     */
    public static final long FAIL_SQL = 100 | MASK_ERROR;
    public static final long FAIL_SQL_ROLLBACK = 101 | MASK_ERROR;

    /*
     * Codes 200-299: invalid * failures
     */
    public static final long FAIL_INVLD_NODE_NAME = 200 | MASK_ERROR;
    public static final long FAIL_INVLD_NODE_TYPE = 201 | MASK_ERROR;
    public static final long FAIL_INVLD_RSC_NAME = 202 | MASK_ERROR;
    public static final long FAIL_INVLD_RSC_PORT = 203 | MASK_ERROR;
    public static final long FAIL_INVLD_NODE_ID = 204 | MASK_ERROR;
    public static final long FAIL_INVLD_VLM_NR = 205 | MASK_ERROR;
    public static final long FAIL_INVLD_VLM_SIZE = 206 | MASK_ERROR;
    public static final long FAIL_INVLD_MINOR_NR = 207 | MASK_ERROR;
    public static final long FAIL_INVLD_STOR_POOL_NAME = 208 | MASK_ERROR;
    public static final long FAIL_INVLD_NET_NAME = 209 | MASK_ERROR;
    public static final long FAIL_INVLD_NET_ADDR = 210 | MASK_ERROR;
    public static final long FAIL_INVLD_NET_PORT = 211 | MASK_ERROR;
    public static final long FAIL_INVLD_NET_TYPE = 212 | MASK_ERROR;
    public static final long FAIL_INVLD_PROP = 213 | MASK_ERROR;
    public static final long FAIL_INVLD_TRANSPORT_TYPE = 214 | MASK_ERROR;
    public static final long FAIL_INVLD_TCP_PORT = 215 | MASK_ERROR;
    public static final long FAIL_INVLD_CRYPT_PASSPHRASE = 216 | MASK_ERROR;
    public static final long FAIL_INVLD_ENCRYPT_TYPE = 217 | MASK_ERROR;
    public static final long FAIL_INVLD_SNAPSHOT_NAME = 218 | MASK_ERROR;
    public static final long FAIL_INVLD_PLACE_COUNT = 219 | MASK_ERROR;
    public static final long FAIL_INVLD_FREE_SPACE_MGR_NAME = 220 | MASK_ERROR;
    public static final long FAIL_INVLD_STOR_DRIVER = 221 | MASK_ERROR;
    public static final long FAIL_INVLD_DRBD_PROXY_COMPRESSION_TYPE = 222 | MASK_ERROR;
    public static final long FAIL_INVLD_KVS_NAME = 223 | MASK_ERROR;
    public static final long FAIL_INVLD_LAYER_KIND = 224 | MASK_ERROR;
    public static final long FAIL_INVLD_LAYER_STACK = 225 | MASK_ERROR;
    public static final long FAIL_INVLD_EXT_NAME = 226 | MASK_ERROR;
    public static final long FAIL_INVLD_PROVIDER = 227 | MASK_ERROR;
    public static final long FAIL_INVLD_VLM_SIZES = 228 | MASK_ERROR;
    public static final long FAIL_INVLD_VLM_COUNT = 229 | MASK_ERROR;
    public static final long FAIL_INVLD_CONF = 230 | MASK_ERROR;
    public static final long FAIL_INVLD_SNAPSHOT_SHIPPING_SOURCE = 231 | MASK_ERROR;
    public static final long FAIL_INVLD_SNAPSHOT_SHIPPING_TARGET = 232 | MASK_ERROR;

    /*
     * Codes 300-399: dependency not found failures
     */
    public static final long FAIL_NOT_FOUND_NODE = 300 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_RSC_DFN = 301 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_RSC = 302 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_VLM_DFN = 303 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_VLM = 304 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_NET_IF = 305 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_NODE_CONN = 306 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_RSC_CONN = 307 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_VLM_CONN = 308 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_STOR_POOL_DFN = 309 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_STOR_POOL = 310 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_DFLT_STOR_POOL = 311 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_CRYPT_KEY = 312 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_SNAPSHOT_DFN = 313 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_SNAPSHOT_VLM_DFN = 314 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_SNAPSHOT = 315 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_KVS = 316 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_RSC_GRP = 317 | MASK_ERROR;
    public static final long FAIL_NOT_FOUND_VLM_GRP = 318 | MASK_ERROR;

    /*
     * Codes 400-499: access denied failures
     */
    public static final long FAIL_ACC_DENIED_NODE = 400 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_RSC_DFN = 401 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_RSC = 402 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_VLM_DFN = 403 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_VLM = 404 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_STOR_POOL_DFN = 405 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_STOR_POOL = 406 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_NODE_CONN = 407 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_RSC_CONN = 408 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_VLM_CONN = 409 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_STLT_CONN = 410 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_CTRL_CFG = 411 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_COMMAND = 412 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_WATCH = 413 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_SNAPSHOT_DFN = 414 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_SNAPSHOT = 415 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_SNAPSHOT_VLM_DFN = 416 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_FREE_SPACE_MGR = 417 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_KVS = 418 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_RSC_GRP = 419 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_VLM_GRP = 420 | MASK_ERROR;
    public static final long FAIL_ACC_DENIED_SNAP_DFN = 421 | MASK_ERROR;

    /*
     * Codes 500-599: data already exists failures
     */
    public static final long FAIL_EXISTS_NODE = 500 | MASK_ERROR;
    public static final long FAIL_EXISTS_RSC_DFN = 501 | MASK_ERROR;
    public static final long FAIL_EXISTS_RSC = 502 | MASK_ERROR;
    public static final long FAIL_EXISTS_VLM_DFN = 503 | MASK_ERROR;
    public static final long FAIL_EXISTS_VLM = 504 | MASK_ERROR;
    public static final long FAIL_EXISTS_NET_IF = 505 | MASK_ERROR;
    public static final long FAIL_EXISTS_NODE_CONN = 506 | MASK_ERROR;
    public static final long FAIL_EXISTS_RSC_CONN = 507 | MASK_ERROR;
    public static final long FAIL_EXISTS_VLM_CONN = 508 | MASK_ERROR;
    public static final long FAIL_EXISTS_STOR_POOL_DFN = 509 | MASK_ERROR;
    public static final long FAIL_EXISTS_STOR_POOL = 510 | MASK_ERROR;
    public static final long FAIL_EXISTS_STLT_CONN = 511 | MASK_ERROR;
    public static final long FAIL_EXISTS_CRYPT_PASSPHRASE = 512 | MASK_ERROR;
    public static final long FAIL_EXISTS_WATCH = 513 | MASK_ERROR;
    public static final long FAIL_EXISTS_SNAPSHOT_DFN = 514 | MASK_ERROR;
    public static final long FAIL_EXISTS_SNAPSHOT = 516 | MASK_ERROR;
    public static final long FAIL_EXISTS_EXT_NAME = 517 | MASK_ERROR;
    public static final long FAIL_EXISTS_NVME_TARGET_PER_RSC_DFN = 518 | MASK_ERROR;
    public static final long FAIL_EXISTS_NVME_INITIATOR_PER_RSC_DFN = 519 | MASK_ERROR;
    public static final long FAIL_LOST_STOR_POOL = 521 | MASK_ERROR;
    public static final long FAIL_EXISTS_RSC_GRP = 522 | MASK_ERROR;
    public static final long FAIL_EXISTS_VLM_GRP = 523 | MASK_ERROR;
    public static final long FAIL_EXISTS_OPENFLEX_TARGET_PER_RSC_DFN = 524 | MASK_ERROR;
    public static final long FAIL_EXISTS_SNAPSHOT_SHIPPING = 525 | MASK_ERROR;

    /*
     * Codes 600-699: data missing failures
     */
    public static final long FAIL_MISSING_PROPS = 600 | MASK_ERROR;
    public static final long FAIL_MISSING_PROPS_NETCOM_TYPE = 601 | MASK_ERROR;
    public static final long FAIL_MISSING_PROPS_NETCOM_PORT = 602 | MASK_ERROR;
    public static final long FAIL_MISSING_NETCOM = 603 | MASK_ERROR;
    public static final long FAIL_MISSING_PROPS_NETIF_NAME = 604 | MASK_ERROR;
    public static final long FAIL_MISSING_STLT_CONN = 605 | MASK_ERROR;
    public static final long FAIL_MISSING_EXT_NAME = 606 | MASK_ERROR;
    public static final long FAIL_MISSING_NVME_TARGET = 608 | MASK_ERROR;
    public static final long FAIL_NO_STLT_CONN_DEFINED = 609 | MASK_ERROR;
    public static final long FAIL_MISSING_OPENFLEX_TARGET = 610 | MASK_ERROR;

    /*
     * Codes 700-799: uuid mismatch failures
     */
    public static final long FAIL_UUID_NODE = 700 | MASK_ERROR;
    public static final long FAIL_UUID_RSC_DFN = 701 | MASK_ERROR;
    public static final long FAIL_UUID_RSC = 702 | MASK_ERROR;
    public static final long FAIL_UUID_VLM_DFN = 703 | MASK_ERROR;
    public static final long FAIL_UUID_VLM = 704 | MASK_ERROR;
    public static final long FAIL_UUID_NET_IF = 705 | MASK_ERROR;
    public static final long FAIL_UUID_NODE_CONN = 706 | MASK_ERROR;
    public static final long FAIL_UUID_RSC_CONN = 707 | MASK_ERROR;
    public static final long FAIL_UUID_VLM_CONN = 708 | MASK_ERROR;
    public static final long FAIL_UUID_STOR_POOL_DFN = 709 | MASK_ERROR;
    public static final long FAIL_UUID_STOR_POOL = 710 | MASK_ERROR;
    public static final long FAIL_UUID_KVS = 711 | MASK_ERROR;

    /*
     * Codes 800-899: number pools exhausted
     */
    public static final long FAIL_POOL_EXHAUSTED_VLM_NR = 800 | MASK_ERROR;
    public static final long FAIL_POOL_EXHAUSTED_MINOR_NR = 801 | MASK_ERROR;
    public static final long FAIL_POOL_EXHAUSTED_TCP_PORT = 802 | MASK_ERROR;
    public static final long FAIL_POOL_EXHAUSTED_NODE_ID = 803 | MASK_ERROR;
    public static final long FAIL_POOL_EXHAUSTED_RSC_LAYER_ID = 804 | MASK_ERROR;
    public static final long FAIL_POOL_EXHAUSTED_OPENFLEX_TCP_PORT = 805 | MASK_ERROR;
    public static final long FAIL_POOL_EXHAUSTED_SNAPSHOT_SHIPPING_TCP_PORT = 806 | MASK_ERROR;

    /*
     * Other failures
     */
    public static final long FAIL_ONLY_ONE_ACT_RSC_PER_SHARED_STOR_POOL_ALLOWED = 981 | MASK_ERROR;
    public static final long FAIL_CRYPT_INIT = 982 | MASK_ERROR;
    public static final long FAIL_SNAPSHOT_SHIPPING_NOT_SUPPORTED = 983 | MASK_ERROR;
    public static final long FAIL_SNAPSHOT_SHIPPING_IN_PROGRESS = 984 | MASK_ERROR;
    public static final long FAIL_UNDECIDABLE_AUTOPLACMENT = 985 | MASK_ERROR;
    public static final long FAIL_PRE_SELECT_SCRIPT_DID_NOT_TERMINATE = 986 | MASK_ERROR;
    public static final long FAIL_LINSTOR_MANAGED_SATELLITE_DID_NOT_START_PROPERLY = 987 | MASK_ERROR;
    public static final long FAIL_STLT_DOES_NOT_SUPPORT_LAYER = 988 | MASK_ERROR;
    public static final long FAIL_STLT_DOES_NOT_SUPPORT_PROVIDER = 989 | MASK_ERROR;
    public static final long FAIL_STOR_POOL_CONFIGURATION_ERROR = 990 | MASK_ERROR;
    public static final long FAIL_INSUFFICIENT_REPLICA_COUNT = 991 | MASK_ERROR;
    public static final long FAIL_RSC_BUSY = 992 | MASK_ERROR;
    public static final long FAIL_INSUFFICIENT_PEER_SLOTS = 993 | MASK_ERROR;
    public static final long FAIL_SNAPSHOTS_NOT_SUPPORTED = 994 | MASK_ERROR;
    public static final long FAIL_NOT_CONNECTED = 995 | MASK_ERROR;
    public static final long FAIL_NOT_ENOUGH_NODES = 996 | MASK_ERROR;
    public static final long FAIL_IN_USE = 997 | MASK_ERROR;
    public static final long FAIL_UNKNOWN_ERROR = 998 | MASK_ERROR;
    public static final long FAIL_IMPL_ERROR = 999 | MASK_ERROR;

    /*
     * Codes 1000-9999: warnings
     */
    public static final long WARN_INVLD_OPT_PROP_NETCOM_ENABLED = 1001 | MASK_WARN;
    public static final long WARN_NOT_CONNECTED = 1002 | MASK_WARN;
    public static final long WARN_STLT_NOT_UPDATED = 1003 | MASK_WARN;
    public static final long WARN_NO_STLT_CONN_DEFINED = 1004 | MASK_WARN;
    public static final long WARN_DEL_UNSET_PROP = 1005 | MASK_WARN;
    public static final long WARN_RSC_ALREADY_DEPLOYED = 1006 | MASK_WARN;
    public static final long WARN_RSC_ALREADY_HAS_DISK = 1007 | MASK_WARN;
    public static final long WARN_RSC_ALREADY_DISKLESS = 1008 | MASK_WARN;
    public static final long WARN_ALL_DISKLESS = 1009 | MASK_WARN;
    public static final long WARN_STORAGE_ERROR = 1010 | MASK_WARN;
    public static final long WARN_NOT_FOUND_CRYPT_KEY = 1011 | MASK_WARN;
    public static final long WARN_STORAGE_KIND_ADDED = 1012 | MASK_WARN;
    public static final long WARN_NOT_ENOUGH_NODES_FOR_TIE_BREAKER = 1013 | MASK_WARN;
    public static final long WARN_MIXED_PMEM_AND_NON_PMEM = 1014 | MASK_WARN;
    public static final long WARN_UNEFFECTIVE_PROP = 1015 | MASK_WARN;
    public static final long WARN_INVLD_SNAPSHOT_SHIPPING_PREFIX = 1016 | MASK_WARN;
    public static final long WARN_NOT_FOUND = 3000 | MASK_WARN;

    /*
     * Codes 10000-19999: info
     */
    public static final long INFO_NO_RSC_SPAWNED = 10000 | MASK_INFO;
    public static final long INFO_NODE_NAME_MISMATCH = 10001 | MASK_INFO;
    public static final long INFO_PROP_SET = 10002 | MASK_INFO;
    public static final long INFO_TIE_BREAKER_CREATED = 10003 | MASK_INFO;
    public static final long INFO_TIE_BREAKER_DELETING = 10004 | MASK_INFO;
    public static final long INFO_TIE_BREAKER_TAKEOVER = 10006 | MASK_INFO;
    public static final long INFO_PROP_REMOVED = 10005 | MASK_INFO;
    public static final long INFO_AUTO_DRBD_PROXY_CREATED = 10007 | MASK_INFO;
    public static final long INFO_NOOP = 10007 | MASK_INFO;

    /*
     * Special codes
     */
    public static final long UNKNOWN_API_CALL = 0x0FFFFFFFFFFFFFFFL | MASK_ERROR;
    public static final long API_CALL_AUTH_REQ = 0x0FFFFFFFFFFFFFFEL | MASK_ERROR;
    public static final long API_CALL_PARSE_ERROR = 0x0FFFFFFFFFFFFFFDL | MASK_ERROR;

    /*
     * SignIn codes
     */
    public static final long SUCCESS_SIGN_IN = 10000 | MASK_SUCCESS;
    public static final long FAIL_SIGN_IN = 10000 | MASK_ERROR;
    public static final long FAIL_SIGN_IN_MISSING_CREDENTIALS = 10001 | MASK_ERROR;

    /*
     * Special answer message content types
     */
    // Textual MsgApiCallResponse responses
    public static final String API_REPLY = "Reply";
    // Indicates that the immediate answers to the API call are complete
    public static final String API_END_OF_IMMEDIATE_ANSWERS = "EndOfImmediateAnswers";

    /*
     * Create object APIs
     */
    public static final String API_CRT_NODE = "CrtNode";
    public static final String API_CRT_RSC = "CrtRsc";
    public static final String API_CRT_RSC_DFN = "CrtRscDfn";
    public static final String API_CRT_NET_IF = "CrtNetIf";
    public static final String API_CRT_VLM_DFN = "CrtVlmDfn";
    public static final String API_CRT_SNAPSHOT = "CrtSnapshot";
    public static final String API_CRT_STOR_POOL_DFN = "CrtStorPoolDfn";
    public static final String API_CRT_STOR_POOL = "CrtStorPool";
    public static final String API_CRT_NODE_CONN = "CrtNodeConn";
    public static final String API_CRT_RSC_CONN = "CrtRscConn";
    public static final String API_CRT_VLM_CONN = "CrtVlmConn";
    public static final String API_AUTO_PLACE_RSC = "AutoPlaceRsc";
    public static final String API_CRT_CRYPT_PASS = "CrtCryptPass";
    public static final String API_CRT_OF_TARGET_NODE = "CrtOfTargetNode";
    public static final String API_RESTORE_VLM_DFN = "RestoreVlmDfn";
    public static final String API_RESTORE_SNAPSHOT = "RestoreSnapshot";
    public static final String API_CRT_RSC_GRP = "CrtRscGrp";
    public static final String API_CRT_VLM_GRP = "CrtVlmGrp";
    public static final String API_SPAWN_RSC_DFN = "SpawnRscDfn";
    public static final String API_CREATE_DEVICE_POOL = "CreateDevicePool";

    /*
     * Modify object APIs
     */
    public static final String API_MOD_NODE = "ModNode";
    public static final String API_MOD_NODE_CONN = "ModNodeConn";
    public static final String API_MOD_RSC = "ModRsc";
    public static final String API_TOGGLE_DISK = "ToggleDisk";
    public static final String API_MOD_RSC_CONN = "ModRscConn";
    public static final String API_MOD_RSC_DFN = "ModRscDfn";
    public static final String API_MOD_NET_IF = "ModNetIf";
    public static final String API_MOD_STOR_POOL = "ModStorPool";
    public static final String API_MOD_STOR_POOL_DFN = "ModStorPoolDfn";
    public static final String API_MOD_VLM_DFN = "ModVlmDfn";
    public static final String API_MOD_VLM = "ModVlm";
    public static final String API_MOD_VLM_CONN = "ModVlmConn";
    public static final String API_MOD_SNAPSHOT = "ModSnapshot";
    public static final String API_MOD_CRYPT_PASS = "ModCryptPass";
    public static final String API_ENABLE_DRBD_PROXY = "EnableDrbdProxy";
    public static final String API_DISABLE_DRBD_PROXY = "DisableDrbdProxy";
    public static final String API_MOD_DRBD_PROXY = "ModifyDrbdProxy";
    public static final String API_ROLLBACK_SNAPSHOT = "RollbackSnapshot";
    public static final String API_SHIP_SNAPSHOT = "ShipSnapshot";
    public static final String API_MOD_KVS = "ModifyKvs";
    public static final String API_MOD_RSC_GRP = "ModifyRscGrp";
    public static final String API_MOD_VLM_GRP = "ModifyVlmGrp";
    public static final String API_ACTIVATE_RSC = "ActivateRsc";
    public static final String API_DEACTIVATE_RSC = "DeactivateRsc";

    /*
     * Delete object APIs
     */
    public static final String API_DEL_NODE = "DelNode";
    public static final String API_DEL_RSC = "DelRsc";
    public static final String API_DEL_RSC_DFN = "DelRscDfn";
    public static final String API_DEL_NET_IF = "DelNetIf";
    public static final String API_DEL_VLM_DFN = "DelVlmDfn";
    public static final String API_DEL_STOR_POOL_DFN = "DelStorPoolDfn";
    public static final String API_DEL_STOR_POOL = "DelStorPool";
    public static final String API_DEL_NODE_CONN = "DelNodeConn";
    public static final String API_DEL_RSC_CONN = "DelRscConn";
    public static final String API_DEL_VLM_CONN = "DelVlmConn";
    public static final String API_DEL_SNAPSHOT = "DelSnapshot";
    public static final String API_DEL_KVS = "DelKvs";
    public static final String API_DEL_RSC_GRP = "DelRscGrp";
    public static final String API_DEL_VLM_GRP = "DelVlmGrp";
    public static final String API_LOST_NODE = "LostNode";
    public static final String API_LOST_STOR_POOL = "LostStorPool";

    /*
     * Authentication APIs
     */
    public static final String API_SIGN_IN = "SignIn";
    public static final String API_VERSION = "Version";

    /*
     * Debug APIs
     */
    public static final String API_CRT_DBG_CNSL = "CrtDbgCnsl";
    public static final String API_DSTR_DBG_CNSL = "DstrDbgCnsl";

    /*
     * Command APIs
     */
    public static final String API_CONTROL_CTRL = "ControlCtrl";
    public static final String API_CMD_SHUTDOWN = "Shutdown";
    public static final String API_NODE_RECONNECT = "NodeReconnect";

    /*
     * List object APIs
     */
    public static final String API_LST_NODE = "LstNode";
    public static final String API_LST_RSC = "LstRsc";
    public static final String API_LST_RSC_DFN = "LstRscDfn";
    public static final String API_LST_NET_IF = "LstNetIf";
    public static final String API_LST_VLM_DFN = "LstVlmDfn";
    public static final String API_LST_VLM = "LstVlm";
    public static final String API_LST_SNAPSHOT_DFN = "LstSnapshotDfn";
    public static final String API_LST_STOR_POOL = "LstStorPool";
    public static final String API_LST_STOR_POOL_DFN = "LstStorPoolDfn";
    public static final String API_LST_ERROR_REPORTS = "LstErrorReports";
    public static final String API_REQ_ERROR_REPORTS = "ReqErrorReports";
    public static final String API_DEL_ERROR_REPORT = "DelErrorReport";
    public static final String API_DEL_ERROR_REPORTS = "DelErrorReports";
    public static final String API_REQ_SOS_REPORT = "ReqSosReport";
    public static final String API_REQ_RSC_CONN_LIST = "ReqRscConnList";
    public static final String API_LST_RSC_CONN = "LstRscConn";
    public static final String API_LST_KVS = "LstKvs";
    public static final String API_LST_RSC_GRP = "LstRscGrp";
    public static final String API_LST_VLM_GRP = "LstVlmGrp";
    public static final String API_LST_PHYS_STOR = "LstPhysicalStorage";
    public static final String API_LST_SNAPSHOT_SHIPPINGS = "LstSnapShips";

    /*
     * Query APIs
     */
    public static final String API_QRY_MAX_VLM_SIZE = "QryMaxVlmSize";
    public static final String API_RSP_MAX_VLM_SIZE = "RspMaxVlmSize";

    /*
     * Event APIs
     */
    public static final String API_CRT_WATCH = "CrtWatch";
    public static final String API_DEL_WATCH = "DelWatch";
    public static final String API_EVENT = "Event";
    public static final String API_RPT_SPC = "RptSpc";
    public static final String API_PING = "Ping";
    public static final String API_PONG = "Pong";
    public static final String API_MOD_INF = "ModInf";
    public static final String API_VSN_INF = "VsnInf";
    public static final String API_SET_CTRL_PROP = "SetCtrlProp";
    public static final String API_DEL_CTRL_PROP = "DelCtrlProp";
    public static final String API_LST_CTRL_PROPS = "LstCtrlProps";

    /*
     * Encryption APIs
     */
    public static final String API_ENTER_CRYPT_PASS = "EnterCryptPass";

    /*
     * DRBD property keys
     */
    public static final String KEY_UUID = "UUID";
    public static final String KEY_DRBD_CURRENT_GI = "DrbdCurrentGi";
    public static final String KEY_DMSTATS = "DMStats";
    public static final String KEY_DRBD_AUTO_QUORUM = "auto-quorum";
    public static final String KEY_DRBD_AUTO_ADD_QUORUM_TIEBREAKER = "auto-add-quorum-tiebreaker";
    public static final String KEY_MINOR_NR_AUTO_RANGE = "MinorNrAutoRange";
    public static final String KEY_DRBD_AUTO_DISKFUL = "auto-diskful";
    public static final String KEY_DRBD_AUTO_DISKFUL_ALLOW_CLEANUP = "auto-diskful-allow-cleanup";

    /*
     * Node property keys
     */
    public static final String KEY_NODE = "Node";
    public static final String KEY_1ST_NODE = "FirstNode";
    public static final String KEY_2ND_NODE = "SecondNode";
    public static final String KEY_CUR_STLT_CONN_NAME = "CurStltConnName";

    /*
     * Resource property keys
     */
    public static final String KEY_RSC_DFN = "RscDfn";
    public static final String KEY_RSC_GRP = "RscGrp";
    public static final String KEY_TCP_PORT_AUTO_RANGE = "TcpPortAutoRange";
    public static final String KEY_PEER_SLOTS_NEW_RESOURCE = "PeerSlotsNewResource";
    public static final String KEY_PEER_SLOTS = "PeerSlots";
    public static final String KEY_RSC_ROLLBACK_TARGET = "RollbackTarget";
    public static final String KEY_RSC_MIGRATE_FROM = "MigrateFrom";

    /*
     * Volume property keys
     */
    public static final String KEY_VLM_GRP = "VlmGrp";
    public static final String KEY_VLM_NR = "VlmNr";
    public static final String KEY_VLM_RESTORE_FROM_RESOURCE = "RestoreFromResource";
    public static final String KEY_VLM_RESTORE_FROM_SNAPSHOT = "RestoreFromSnapshot";

    /*
     * ldap property keys
     */
    public static final String KEY_SEARCH_DOMAIN = "SearchDomain";

    /*
     * nvme property keys
     */
    public static final String KEY_TR_TYPE = "TRType";

    /*
     * Snapshot property keys
     */
    public static final String KEY_SNAPSHOT = "Snapshot";
    public static final String KEY_SNAPSHOT_DFN_SEQUENCE_NUMBER = "SequenceNumber";

    /*
     * Network Interface property keys
     */
    public static final String KEY_PORT = "Port";
    public static final String KEY_DISABLE_HTTP_METRICS = "disable-http-metrics";

    /*
     * Writecache property keys
     */
    public static final String KEY_WRITECACHE_BLOCKSIZE = "Blocksize";
    public static final String KEY_WRITECACHE_POOL_NAME = "PoolName";
    public static final String KEY_WRITECACHE_SIZE = "Size";
    public static final String KEY_WRITECACHE_OPTION_HIGH_WATERMARK = "HighWatermark";
    public static final String KEY_WRITECACHE_OPTION_LOW_WATERMARK = "LowWatermark";
    public static final String KEY_WRITECACHE_OPTION_START_SECTOR = "StartSector";
    public static final String KEY_WRITECACHE_OPTION_WRITEBACK_JOBS = "WritebackJobs";
    public static final String KEY_WRITECACHE_OPTION_AUTOCOMMIT_BLOCKS = "AutocommitBlocks";
    public static final String KEY_WRITECACHE_OPTION_AUTOCOMMIT_TIME = "AutocommitTime";
    public static final String KEY_WRITECACHE_OPTION_FUA = "Fua";
    public static final String KEY_WRITECACHE_OPTION_ADDITIONAL = "Additional";

    /*
     * Cache property keys
     */
    public static final String KEY_CACHE_OPERATING_MODE = "OpMode";
    public static final String KEY_CACHE_META_POOL_NAME = "MetaPool";
    public static final String KEY_CACHE_CACHE_POOL_NAME = "CachePool";
    public static final String KEY_CACHE_META_SIZE = "Metasize";
    public static final String KEY_CACHE_CACHE_SIZE = "Cachesize";
    public static final String KEY_CACHE_BLOCK_SIZE = "Blocksize";
    public static final String KEY_CACHE_POLICY = "Policy";
    public static final String KEY_UPDATE_CACHE_INTERVAL = "UpdateCacheInterval";

    /*
     * Autoplace property keys
     */
    public static final String KEY_AUTOPLACE_STRAT_WEIGHT_MAX_FREESPACE = "MaxFreeSpace";
    public static final String KEY_AUTOPLACE_STRAT_WEIGHT_MIN_RESERVED_SPACE = "MinReservedSpace";
    public static final String KEY_AUTOPLACE_STRAT_WEIGHT_MIN_RSC_COUNT = "MinRscCount";
    public static final String KEY_AUTOPLACE_PRE_SELECT_FILE_NAME = "PreSelectScript";
    public static final String KEY_AUTOPLACE_PRE_SELECT_SCRIPT_TIMEOUT = "PreSelectScriptTimeout";
    public static final String KEY_AUTOPLACE_MAX_THROUGHPUT = "MaxThroughput";
    public static final String KEY_SITE = "Site";

    /*
     * Auto-Evict property keys
     */
    public static final String KEY_AUTO_EVICT_MIN_REPLICA_COUNT = "AutoEvictMinReplicaCount";
    public static final String KEY_AUTO_EVICT_AFTER_TIME = "AutoEvictAfterTime";
    public static final String KEY_AUTO_EVICT_MAX_DISCONNECTED_NODES = "AutoEvictMaxDisconnectedNodes";

    /*
     * Snapshot shipping property keys
     */
    public static final String KEY_SNAPSHOT_SHIPPING_PREFIX = "SnapshotShippingPrefix";
    public static final String KEY_TARGET_NODE = "TargetNode";
    public static final String KEY_SOURCE_NODE = "SourceNode";
    public static final String KEY_RUN_EVERY = "RunEvery";
    public static final String KEY_AUTO_SNAPSHOT_PREFIX = "Prefix";
    public static final String KEY_KEEP = "Keep";
    public static final String KEY_AUTO_SNAPSHOT_NEXT_ID = "NextAutoId";

    /*
     * Property namespaces
     */
    public static final String NAMESPC_NETCOM = "NetCom";
    public static final String NAMESPC_DFLT = "Default";
    public static final String NAMESPC_LOGGING = "Logging";
    public static final String NAMESPC_ALLOC = "Allocation";
    public static final String NAMESPC_NETIF = "NetIf";
    public static final String NAMESPC_STLT = "Satellite";
    public static final String NAMESPC_NODE = "Node";
    public static final String NAMESPC_STORAGE_DRIVER = "StorDriver";
    public static final String NAMESPC_DRBD_PROXY = "DrbdProxy";
    public static final String NAMESPC_AUXILIARY = "Aux";
    public static final String NAMESPC_DRBD_OPTIONS = "DrbdOptions";
    public static final String NAMESPC_DRBD_NET_OPTIONS = "DrbdOptions/Net";
    public static final String NAMESPC_DRBD_DISK_OPTIONS = "DrbdOptions/Disk";
    public static final String NAMESPC_DRBD_RESOURCE_OPTIONS = "DrbdOptions/Resource";
    public static final String NAMESPC_DRBD_PEER_DEVICE_OPTIONS = "DrbdOptions/PeerDevice";
    public static final String NAMESPC_DRBD_PROXY_OPTIONS = "DrbdOptions/Proxy";
    public static final String NAMESPC_DRBD_PROXY_COMPRESSION_OPTIONS = "DrbdOptions/ProxyCompression";
    public static final String NAMESPC_DRBD_HANDLER_OPTIONS = "DrbdOptions/Handlers";
    public static final String NAMESPC_CONNECTION_PATHS = "Paths";
    public static final String NAMESPC_REST = "REST";
    public static final String NAMESPC_FILESYSTEM = "FileSystem";
    public static final String NAMESPC_NVME = "NVMe";
    public static final String NAMESPC_SYS_FS = "sys/fs";
    public static final String NAMESPC_WRITECACHE = "Writecache";
    public static final String NAMESPC_WRITECACHE_OPTIONS = "Writecache/Options";
    public static final String NAMESPC_CACHE = "Cache";
    public static final String NAMESPC_CACHE_FEATURES = "Cache/Features";
    public static final String NAMESPC_CACHE_POLICY_ARGS = "Cache/Policy";
    public static final String NAMESPC_AUTOPLACER = "Autoplacer";
    public static final String NAMESPC_AUTOPLACER_WEIGHTS = "Autoplacer/Weights";
    public static final String NAMESPC_SNAPSHOT_SHIPPING = "SnapshotShipping";
    public static final String NAMESPC_AUTO_SNAPSHOT = "AutoSnapshot";

    /*
     * Storage pool property keys
     */
    public static final String KEY_STOR_POOL_DFN = "StorPoolDfn";
    public static final String KEY_STOR_POOL_NAME = "StorPoolName";
    public static final String KEY_STOR_POOL_DRBD_META_NAME = "StorPoolNameDrbdMeta";
    public static final String KEY_STOR_POOL_VOLUME_GROUP = "LvmVg";
    public static final String KEY_STOR_POOL_LVCREATE_TYPE = "LvcreateType";
    public static final String KEY_STOR_POOL_LVCREATE_OPTIONS = "LvcreateOptions";
    public static final String KEY_STOR_POOL_THIN_POOL = "ThinPool";
    public static final String KEY_STOR_POOL_ZPOOL = "ZPool";
    public static final String KEY_STOR_POOL_ZPOOLTHIN = "ZPoolThin";
    public static final String KEY_STOR_POOL_ZFS_CREATE_OPTIONS = "ZfscreateOptions";
    public static final String KEY_STOR_POOL_FILE_DIRECTORY = "FileDir";
    public static final String KEY_STOR_POOL_PREF_NIC = "PrefNic";
    public static final String KEY_STOR_POOL_CRYPT_PASSWD = "CryptPasswd";
    public static final String KEY_STOR_POOL_OVERRIDE_VLM_ID = "OverrideVlmId";
    public static final String KEY_STOR_POOL_DFN_MAX_OVERSUBSCRIPTION_RATIO = "MaxOversubscriptionRatio";
    public static final String KEY_STOR_POOL_WAIT_TIMEOUT_AFTER_CREATE = "WaitTimeoutAfterCreate";
    public static final String KEY_STOR_POOL_OPENFLEX_API_HOST = "Openflex/ApiHost";
    public static final String KEY_STOR_POOL_OPENFLEX_API_PORT = "Openflex/ApiPort";
    public static final String KEY_STOR_POOL_OPENFLEX_STOR_DEV = "Openflex/StorDev";
    public static final String KEY_STOR_POOL_OPENFLEX_STOR_DEV_HOST = "Openflex/StorDevHost";
    public static final String KEY_STOR_POOL_OPENFLEX_STOR_POOL = "Openflex/StorPool";
    public static final String KEY_STOR_POOL_OPENFLEX_USER_NAME = "Openflex/UserName";
    public static final String KEY_STOR_POOL_OPENFLEX_USER_PW = "Openflex/UserPassword";
    public static final String KEY_STOR_POOL_OPENFLEX_JOB_WAIT_MAX_COUNT = "Openflex/JobWaitMaxCount";
    public static final String KEY_STOR_POOL_OPENFLEX_JOB_WAIT_DELAY = "Openflex/JobWaitDelay";
    public static final String KEY_OF_TARGET_PORT_AUTO_RANGE = "OpenflexTargetPortAutoRange";
    public static final String KEY_PREF_NIC = "PrefNic";

    /*
     * Storage pool traits keys
     */
    public static final String KEY_STOR_POOL_SUPPORTS_SNAPSHOTS = "SupportsSnapshots";
    public static final String KEY_STOR_POOL_PROVISIONING = "Provisioning";
    // Unit of smallest allocation. The size in KiB as a decimal number.
    public static final String KEY_STOR_POOL_ALLOCATION_UNIT = "AllocationUnit";

    /*
     * Storage pool traits values
     */
    public static final String VAL_STOR_POOL_PROVISIONING_FAT = "Fat";
    public static final String VAL_STOR_POOL_PROVISIONING_THIN = "Thin";
    public static final String VAL_STOR_POOL_DRBD_META_INTERNAL = ".internal";

    /*
     * DRBD Proxy keys (other than 'options')
     */
    public static final String KEY_DRBD_PROXY_COMPRESSION_TYPE = "CompressionType";
    public static final String KEY_DRBD_PROXY_AUTO_ENABLE = "AutoEnable";

    /*
     * File system property keys
     */
    public static final String KEY_FS_TYPE = "Type";
    public static final String KEY_FS_MKFSPARAMETERS = "MkfsParams";
    public static final String VAL_FS_TYPE_EXT4 = "ext4";
    public static final String VAL_FS_TYPE_XFS = "xfs";

    /*
     * sys/fs property keys
     */
    public static final String KEY_SYS_FS_BLKIO_THROTTLE_READ = "blkio_throttle_read";
    public static final String KEY_SYS_FS_BLKIO_THROTTLE_WRITE = "blkio_throttle_write";
    public static final String KEY_SYS_FS_BLKIO_THROTTLE_READ_IOPS = "blkio_throttle_read_iops";
    public static final String KEY_SYS_FS_BLKIO_THROTTLE_WRITE_IOPS = "blkio_throttle_write_iops";

    /*
     * Property values
     */
    public static final String VAL_NETCOM_TYPE_SSL = "SSL";
    public static final String VAL_NETCOM_TYPE_PLAIN = "Plain";
    public static final String VAL_SSL_PROTO_TLSv1 = "TLSv1";

    /*
     * DRBD related property values
     */
    public static final String VAL_DRBD_PROXY_COMPRESSION_NONE = "none";
    public static final String VAL_DRBD_PROXY_COMPRESSION_ZSTD = "zstd";
    public static final String VAL_DRBD_PROXY_COMPRESSION_ZLIB = "zlib";
    public static final String VAL_DRBD_PROXY_COMPRESSION_LZMA = "lzma";
    public static final String VAL_DRBD_PROXY_COMPRESSION_LZ4 = "lz4";
    public static final String VAL_DRBD_AUTO_QUORUM_DISABLED = "disabled";
    public static final String VAL_DRBD_AUTO_QUORUM_IO_ERROR = "io-error";
    public static final String VAL_DRBD_AUTO_QUORUM_SUSPEND_IO = "suspend-io";

    /*
     * Node Type values
     */
    public static final String VAL_NODE_TYPE_CTRL = "Controller";
    public static final String VAL_NODE_TYPE_STLT = "Satellite";
    public static final String VAL_NODE_TYPE_CMBD = "Combined";
    public static final String VAL_NODE_TYPE_AUX = "Auxiliary";
    public static final String VAL_NODE_TYPE_OPENFLEX_TARGET = "Openflex_Target";

    /*
     * Writecache option values
     */
    public static final String VAL_WRITECACHE_FUA_ON = "On";
    public static final String VAL_WRITECACHE_FUA_OFF = "Off";

    /*
     * Net interface Type values
     */
    public static final String VAL_NETIF_TYPE_IP = "IP";
    public static final String VAL_NETIF_TYPE_RDMA = "RDMA";
    public static final String VAL_NETIF_TYPE_ROCE = "RoCE";

    /*
     * Authentication keys
     */
    public static final String KEY_SEC_IDENTITY = "SecIdentity";
    public static final String KEY_SEC_ROLE = "SecRole";
    public static final String KEY_SEC_TYPE = "SecType";
    public static final String KEY_SEC_DOMAIN = "SecDomain";
    public static final String KEY_SEC_PASSWORD = "SecPassword";
    public static final String KEY_POOL_NAME = "PoolName";

    /*
     * External commands keys
     */
    public static final String KEY_EXT_CMD_WAIT_TO = "ExtCmdWaitTimeout";

    /*
     * Default ports
     */
    public static final int DFLT_CTRL_PORT_SSL = 3377;
    public static final int DFLT_CTRL_PORT_PLAIN = 3376;
    public static final int DFLT_STLT_PORT_SSL = 3367;
    public static final int DFLT_STLT_PORT_PLAIN = 3366;

    /*
     * Boolean values
     */
    public static final String VAL_TRUE = "True";
    public static final String VAL_FALSE = "False";
    public static final String VAL_YES = "Yes";
    public static final String VAL_NO = "No";

    /*
     * Snapshot-shipping values
     */
    public static final String VAL_SNAP_SHIP_NAME = "SnapshotShipping";
    public enum SnapshotShipStatus
    {
        RUNNING("Running"),
        COMPLETE("Complete");

        private final String enumValue;
        SnapshotShipStatus(final String val) { enumValue=val; }
        public String getValue() { return enumValue; }
    }

    /*
     * Flag string values
     */
    public static final String FLAG_CLEAN = "CLEAN";
    public static final String FLAG_EVICTED = "EVICTED";
    public static final String FLAG_DELETE = "DELETE";
    public static final String FLAG_DISKLESS = "DISKLESS";
    public static final String FLAG_QIGNORE = "QIGNORE";
    public static final String FLAG_ENCRYPTED = "ENCRYPTED";
    public static final String FLAG_GROSS_SIZE = "GROSS_SIZE";
    public static final String FLAG_SUCCESSFUL = "SUCCESSFUL";
    public static final String FLAG_FAILED_DEPLOYMENT = "FAILED_DEPLOYMENT";
    public static final String FLAG_FAILED_DISCONNECT = "FAILED_DISCONNECT";
    public static final String FLAG_RESIZE = "RESIZE";
    public static final String FLAG_DISK_ADDING = "DISK_ADDING";
    public static final String FLAG_DISK_ADD_REQUESTED = "DISK_ADD_REQUESTED";
    public static final String FLAG_DISK_REMOVING = "DISK_REMOVING";
    public static final String FLAG_DISK_REMOVE_REQUESTED = "DISK_REMOVE_REQUESTED";
    public static final String FLAG_TIE_BREAKER = "TIE_BREAKER";
    public static final String FLAG_DRBD_DISKLESS = "DRBD_DISKLESS";
    public static final String FLAG_NVME_INITIATOR = "NVME_INITIATOR";
    public static final String FLAG_RSC_INACTIVE = "INACTIVE";

    /*
     * Device layer kinds
     */
    public enum DeviceLayerKind
    {
        DRBD("drbd"),
        LUKS("luks"),
        STORAGE("storage"),
        NVME("nvme"),
        OPENFLEX("openflex"),
        WRITECACHE("writecache"),
        CACHE("cache");

        private final String enumValue;
        DeviceLayerKind(final String val) { enumValue=val; }
        public String getValue() { return enumValue; }
    }

    /*
     * Satellite connection statuses
     */
    public enum ConnectionStatus
    {
        OFFLINE(0),
        CONNECTED(1),
        ONLINE(2),
        VERSION_MISMATCH(3),
        FULL_SYNC_FAILED(4),
        AUTHENTICATION_ERROR(5),
        UNKNOWN(6),
        HOSTNAME_MISMATCH(7),
        OTHER_CONTROLLER(8),
        AUTHENTICATED(9),
        NO_STLT_CONN(10);

        private final int enumValue;
        ConnectionStatus(final int val) { enumValue=val; }
        public int getValue() { return enumValue; }
    }

    /*
     * Default names
     */
    public static final String DEFAULT_NETIF = "default";
    public static final String DFLT_SNAPSHOT_SHIPPING_PREFIX = "ship";

    /*
     * Default values
     */
    public static final String DFLT_AUTO_SNAPSHOT_KEEP = "10";
    public static final String DFLT_SHIPPED_SNAPSHOT_KEEP = "10";

    private ApiConsts()
    {
    }
}
